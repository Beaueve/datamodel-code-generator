{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"datamodel-code-generator This code generator creates pydantic model from an openapi file and others. Supported source types OpenAPI 3 (YAML/JSON, OpenAPI Data Type ) JSON Schema ( JSON Schema Core / JSON Schema Validation ) JSON/YAML/CSV Data (it will be converted to JSON Schema) Python dictionary (it will be converted to JSON Schema) Installation To install datamodel-code-generator : $ pip install datamodel-code-generator http extra option If you want to resolve $ref for remote files then you should specify http extra option. $ pip install datamodel-code-generator [ http ] Usage The datamodel-codegen command: usage: datamodel-codegen [ -h ] [ --input INPUT ] [ --url URL ] [ --http-headers HTTP_HEADER [ HTTP_HEADER ... ]] [ --input-file-type { auto,openapi,jsonschema,json,yaml,dict,csv }] [ --openapi-scopes { schemas,paths } [{ schemas,paths } ... ]] [ --output OUTPUT ] [ --base-class BASE_CLASS ] [ --field-constraints ] [ --use-annotated ] [ --use_non_positive_negative_number_constrained_types ] [ --field-extra-keys FIELD_EXTRA_KEYS [ FIELD_EXTRA_KEYS ... ]] [ --field-include-all-keys ] [ --snake-case-field ] [ --strip-default-none ] [ --disable-appending-item-suffix ] [ --allow-population-by-field-name ] [ --enable-faux-immutability ] [ --use-default ] [ --force-optional ] [ --strict-nullable ] [ --strict-types { str,bytes,int,float,bool } [{ str,bytes,int,float,bool } ... ]] [ --disable-timestamp ] [ --use-standard-collections ] [ --use-generic-container-types ] [ --use-schema-description ] [ --reuse-model ] [ --enum-field-as-literal { all,one }] [ --set-default-enum-member ] [ --empty-enum-field-name EMPTY_ENUM_FIELD_NAME ] [ --class-name CLASS_NAME ] [ --use-title-as-name ] [ --custom-template-dir CUSTOM_TEMPLATE_DIR ] [ --extra-template-data EXTRA_TEMPLATE_DATA ] [ --aliases ALIASES ] [ --target-python-version { 3 .6,3.7,3.8,3.9 }] [ --wrap-string-literal ] [ --validation ] [ --encoding ENCODING ] [ --debug ] [ --version ] optional arguments: -h, --help show this help message and exit --input INPUT Input file/directory ( default: stdin ) --url URL Input file URL. ` --input ` is ignore when ` --url ` is used --http-headers HTTP_HEADER [ HTTP_HEADER ... ] Set headers in HTTP requests to the remote host. ( example: \"Authorization: Basic dXNlcjpwYXNz\" ) --input-file-type { auto,openapi,jsonschema,json,yaml,dict,csv } Input file type ( default: auto ) --openapi-scopes { schemas,paths } [{ schemas,paths } ... ] Scopes of OpenAPI model generation ( default: schemas ) --output OUTPUT Output file ( default: stdout ) --base-class BASE_CLASS Base Class ( default: pydantic.BaseModel ) --field-constraints Use field constraints and not con* annotations --use-annotated Use typing.Annotated for Field () . Also, ` --field- constraints ` option will be enabled. --use_non_positive_negative_number_constrained_types Use the Non { Positive,Negative }{ FloatInt } types instead of the corresponding con* constrained types. --field-extra-keys FIELD_EXTRA_KEYS [ FIELD_EXTRA_KEYS ... ] Add extra keys to field parameters --field-include-all-keys Add all keys to field parameters --snake-case-field Change camel-case field name to snake-case --strip-default-none Strip default None on fields --disable-appending-item-suffix Disable appending ` Item ` suffix to model name in an array --allow-population-by-field-name Allow population by field name --enable-faux-immutability Enable faux immutability --use-default Use default value even if a field is required --force-optional Force optional for required fields --strict-nullable Treat default field as a non-nullable field ( Only OpenAPI ) --strict-types { str,bytes,int,float,bool } [{ str,bytes,int,float,bool } ... ] Use strict types --disable-timestamp Disable timestamp on file headers --use-standard-collections Use standard collections for type hinting ( list, dict ) --use-generic-container-types Use generic container types for type hinting ( typing.Sequence, typing.Mapping ) . If ` --use-standard- collections ` option is set, then import from collections.abc instead of typing --use-schema-description Use schema description to populate class docstring --reuse-model Re-use models on the field when a module has the model with the same content --enum-field-as-literal { all,one } Parse enum field as literal. all: all enum field type are Literal. one: field type is Literal when an enum has only one possible value --set-default-enum-member Set enum members as default values for enum field --empty-enum-field-name EMPTY_ENUM_FIELD_NAME Set field name when enum value is empty ( default: ` _ ` ) --class-name CLASS_NAME Set class name of root model --use-title-as-name use titles as class names of models --custom-template-dir CUSTOM_TEMPLATE_DIR Custom template directory --extra-template-data EXTRA_TEMPLATE_DATA Extra template data --aliases ALIASES Alias mapping file --target-python-version { 3 .6,3.7,3.8,3.9 } target python version ( default: 3 .7 ) --wrap-string-literal Wrap string literal by using black ` experimental- string-processing ` option ( require black 20 .8b0 or later ) --validation Enable validation ( Only OpenAPI ) --encoding ENCODING The encoding of input and output ( default: UTF-8 ) --debug show debug message --version show version Example OpenAPI $ datamodel-codegen --input api.yaml --output model.py api.yaml openapi : \"3.0.0\" info : version : 1.0.0 title : Swagger Petstore license : name : MIT servers : - url : http://petstore.swagger.io/v1 paths : /pets : get : summary : List all pets operationId : listPets tags : - pets parameters : - name : limit in : query description : How many items to return at one time (max 100) required : false schema : type : integer format : int32 responses : '200' : description : A paged array of pets headers : x-next : description : A link to the next page of responses schema : type : string content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy post : summary : Create a pet operationId : createPets tags : - pets responses : '201' : description : Null response default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy /pets/{petId} : get : summary : Info for a specific pet operationId : showPetById tags : - pets parameters : - name : petId in : path required : true description : The id of the pet to retrieve schema : type : string responses : '200' : description : Expected response to a valid request content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy components : schemas : Pet : required : - id - name properties : id : type : integer format : int64 name : type : string tag : type : string Pets : type : array items : $ref : \"#/components/schemas/Pet\" Error : required : - code - message properties : code : type : integer format : int32 message : type : string apis : type : array items : type : object properties : apiKey : type : string description : To be used as a dataset parameter value apiVersionNumber : type : string description : To be used as a version parameter value apiUrl : type : string format : uri description : \"The URL describing the dataset's fields\" apiDocumentationUrl : type : string format : uri description : A URL to the API console for each API model.py : # generated by datamodel-codegen: # filename: api.yaml # timestamp: 2020-06-02T05:28:24+00:00 from __future__ import annotations from typing import List , Optional from pydantic import AnyUrl , BaseModel , Field class Pet ( BaseModel ): id : int name : str tag : Optional [ str ] = None class Pets ( BaseModel ): __root__ : List [ Pet ] class Error ( BaseModel ): code : int message : str class Api ( BaseModel ): apiKey : Optional [ str ] = Field ( None , description = 'To be used as a dataset parameter value' ) apiVersionNumber : Optional [ str ] = Field ( None , description = 'To be used as a version parameter value' ) apiUrl : Optional [ AnyUrl ] = Field ( None , description = \"The URL describing the dataset's fields\" ) apiDocumentationUrl : Optional [ AnyUrl ] = Field ( None , description = 'A URL to the API console for each API' ) class Apis ( BaseModel ): __root__ : List [ Api ] Related projects fastapi-code-generator This code generator creates FastAPI app from an openapi file. https://github.com/koxudaxi/fastapi-code-generator pydantic-pycharm-plugin A JetBrains PyCharm plugin for pydantic . https://github.com/koxudaxi/pydantic-pycharm-plugin PyPi https://pypi.org/project/datamodel-code-generator Source Code https://github.com/koxudaxi/datamodel-code-generator License datamodel-code-generator is released under the MIT License. http://www.opensource.org/licenses/mit-license","title":"Overview"},{"location":"#datamodel-code-generator","text":"This code generator creates pydantic model from an openapi file and others.","title":"datamodel-code-generator"},{"location":"#supported-source-types","text":"OpenAPI 3 (YAML/JSON, OpenAPI Data Type ) JSON Schema ( JSON Schema Core / JSON Schema Validation ) JSON/YAML/CSV Data (it will be converted to JSON Schema) Python dictionary (it will be converted to JSON Schema)","title":"Supported source types"},{"location":"#installation","text":"To install datamodel-code-generator : $ pip install datamodel-code-generator","title":"Installation"},{"location":"#http-extra-option","text":"If you want to resolve $ref for remote files then you should specify http extra option. $ pip install datamodel-code-generator [ http ]","title":"http extra option"},{"location":"#usage","text":"The datamodel-codegen command: usage: datamodel-codegen [ -h ] [ --input INPUT ] [ --url URL ] [ --http-headers HTTP_HEADER [ HTTP_HEADER ... ]] [ --input-file-type { auto,openapi,jsonschema,json,yaml,dict,csv }] [ --openapi-scopes { schemas,paths } [{ schemas,paths } ... ]] [ --output OUTPUT ] [ --base-class BASE_CLASS ] [ --field-constraints ] [ --use-annotated ] [ --use_non_positive_negative_number_constrained_types ] [ --field-extra-keys FIELD_EXTRA_KEYS [ FIELD_EXTRA_KEYS ... ]] [ --field-include-all-keys ] [ --snake-case-field ] [ --strip-default-none ] [ --disable-appending-item-suffix ] [ --allow-population-by-field-name ] [ --enable-faux-immutability ] [ --use-default ] [ --force-optional ] [ --strict-nullable ] [ --strict-types { str,bytes,int,float,bool } [{ str,bytes,int,float,bool } ... ]] [ --disable-timestamp ] [ --use-standard-collections ] [ --use-generic-container-types ] [ --use-schema-description ] [ --reuse-model ] [ --enum-field-as-literal { all,one }] [ --set-default-enum-member ] [ --empty-enum-field-name EMPTY_ENUM_FIELD_NAME ] [ --class-name CLASS_NAME ] [ --use-title-as-name ] [ --custom-template-dir CUSTOM_TEMPLATE_DIR ] [ --extra-template-data EXTRA_TEMPLATE_DATA ] [ --aliases ALIASES ] [ --target-python-version { 3 .6,3.7,3.8,3.9 }] [ --wrap-string-literal ] [ --validation ] [ --encoding ENCODING ] [ --debug ] [ --version ] optional arguments: -h, --help show this help message and exit --input INPUT Input file/directory ( default: stdin ) --url URL Input file URL. ` --input ` is ignore when ` --url ` is used --http-headers HTTP_HEADER [ HTTP_HEADER ... ] Set headers in HTTP requests to the remote host. ( example: \"Authorization: Basic dXNlcjpwYXNz\" ) --input-file-type { auto,openapi,jsonschema,json,yaml,dict,csv } Input file type ( default: auto ) --openapi-scopes { schemas,paths } [{ schemas,paths } ... ] Scopes of OpenAPI model generation ( default: schemas ) --output OUTPUT Output file ( default: stdout ) --base-class BASE_CLASS Base Class ( default: pydantic.BaseModel ) --field-constraints Use field constraints and not con* annotations --use-annotated Use typing.Annotated for Field () . Also, ` --field- constraints ` option will be enabled. --use_non_positive_negative_number_constrained_types Use the Non { Positive,Negative }{ FloatInt } types instead of the corresponding con* constrained types. --field-extra-keys FIELD_EXTRA_KEYS [ FIELD_EXTRA_KEYS ... ] Add extra keys to field parameters --field-include-all-keys Add all keys to field parameters --snake-case-field Change camel-case field name to snake-case --strip-default-none Strip default None on fields --disable-appending-item-suffix Disable appending ` Item ` suffix to model name in an array --allow-population-by-field-name Allow population by field name --enable-faux-immutability Enable faux immutability --use-default Use default value even if a field is required --force-optional Force optional for required fields --strict-nullable Treat default field as a non-nullable field ( Only OpenAPI ) --strict-types { str,bytes,int,float,bool } [{ str,bytes,int,float,bool } ... ] Use strict types --disable-timestamp Disable timestamp on file headers --use-standard-collections Use standard collections for type hinting ( list, dict ) --use-generic-container-types Use generic container types for type hinting ( typing.Sequence, typing.Mapping ) . If ` --use-standard- collections ` option is set, then import from collections.abc instead of typing --use-schema-description Use schema description to populate class docstring --reuse-model Re-use models on the field when a module has the model with the same content --enum-field-as-literal { all,one } Parse enum field as literal. all: all enum field type are Literal. one: field type is Literal when an enum has only one possible value --set-default-enum-member Set enum members as default values for enum field --empty-enum-field-name EMPTY_ENUM_FIELD_NAME Set field name when enum value is empty ( default: ` _ ` ) --class-name CLASS_NAME Set class name of root model --use-title-as-name use titles as class names of models --custom-template-dir CUSTOM_TEMPLATE_DIR Custom template directory --extra-template-data EXTRA_TEMPLATE_DATA Extra template data --aliases ALIASES Alias mapping file --target-python-version { 3 .6,3.7,3.8,3.9 } target python version ( default: 3 .7 ) --wrap-string-literal Wrap string literal by using black ` experimental- string-processing ` option ( require black 20 .8b0 or later ) --validation Enable validation ( Only OpenAPI ) --encoding ENCODING The encoding of input and output ( default: UTF-8 ) --debug show debug message --version show version","title":"Usage"},{"location":"#example","text":"","title":"Example"},{"location":"#openapi","text":"$ datamodel-codegen --input api.yaml --output model.py api.yaml openapi : \"3.0.0\" info : version : 1.0.0 title : Swagger Petstore license : name : MIT servers : - url : http://petstore.swagger.io/v1 paths : /pets : get : summary : List all pets operationId : listPets tags : - pets parameters : - name : limit in : query description : How many items to return at one time (max 100) required : false schema : type : integer format : int32 responses : '200' : description : A paged array of pets headers : x-next : description : A link to the next page of responses schema : type : string content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy post : summary : Create a pet operationId : createPets tags : - pets responses : '201' : description : Null response default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy /pets/{petId} : get : summary : Info for a specific pet operationId : showPetById tags : - pets parameters : - name : petId in : path required : true description : The id of the pet to retrieve schema : type : string responses : '200' : description : Expected response to a valid request content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy components : schemas : Pet : required : - id - name properties : id : type : integer format : int64 name : type : string tag : type : string Pets : type : array items : $ref : \"#/components/schemas/Pet\" Error : required : - code - message properties : code : type : integer format : int32 message : type : string apis : type : array items : type : object properties : apiKey : type : string description : To be used as a dataset parameter value apiVersionNumber : type : string description : To be used as a version parameter value apiUrl : type : string format : uri description : \"The URL describing the dataset's fields\" apiDocumentationUrl : type : string format : uri description : A URL to the API console for each API model.py : # generated by datamodel-codegen: # filename: api.yaml # timestamp: 2020-06-02T05:28:24+00:00 from __future__ import annotations from typing import List , Optional from pydantic import AnyUrl , BaseModel , Field class Pet ( BaseModel ): id : int name : str tag : Optional [ str ] = None class Pets ( BaseModel ): __root__ : List [ Pet ] class Error ( BaseModel ): code : int message : str class Api ( BaseModel ): apiKey : Optional [ str ] = Field ( None , description = 'To be used as a dataset parameter value' ) apiVersionNumber : Optional [ str ] = Field ( None , description = 'To be used as a version parameter value' ) apiUrl : Optional [ AnyUrl ] = Field ( None , description = \"The URL describing the dataset's fields\" ) apiDocumentationUrl : Optional [ AnyUrl ] = Field ( None , description = 'A URL to the API console for each API' ) class Apis ( BaseModel ): __root__ : List [ Api ]","title":"OpenAPI"},{"location":"#related-projects","text":"","title":"Related projects"},{"location":"#fastapi-code-generator","text":"This code generator creates FastAPI app from an openapi file. https://github.com/koxudaxi/fastapi-code-generator","title":"fastapi-code-generator"},{"location":"#pydantic-pycharm-plugin","text":"A JetBrains PyCharm plugin for pydantic . https://github.com/koxudaxi/pydantic-pycharm-plugin","title":"pydantic-pycharm-plugin"},{"location":"#pypi","text":"https://pypi.org/project/datamodel-code-generator","title":"PyPi"},{"location":"#source-code","text":"https://github.com/koxudaxi/datamodel-code-generator","title":"Source Code"},{"location":"#license","text":"datamodel-code-generator is released under the MIT License. http://www.opensource.org/licenses/mit-license","title":"License"},{"location":"development-contributing/","text":"Development Install the package in editable mode: $ git clone git@github.com:koxudaxi/datamodel-code-generator.git $ pip install -e datamodel-code-generator Contribute We are waiting for your contributions to datamodel-code-generator . How to contribute ## 1. Clone your fork repository $ git clone git@github.com:<your username>/datamodel-code-generator.git $ cd datamodel-code-generator ## 2. Install [poetry](https://github.com/python-poetry/poetry) $ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python ## 3. Install dependencies $ poetry install ## 4. Create new branch and rewrite code. $ git checkout -b new-branch ## 5. Run unittest (you should pass all test and coverage should be 100%) $ poeyry run ./scripts/test.sh ## 6. Format code $ poeyry run ./scripts/format.sh ## 7. Check lint (mypy) $ poeyry run ./scripts/lint.sh ## 8. Commit and Push...","title":"Development-Contributing"},{"location":"development-contributing/#development","text":"Install the package in editable mode: $ git clone git@github.com:koxudaxi/datamodel-code-generator.git $ pip install -e datamodel-code-generator","title":"Development"},{"location":"development-contributing/#contribute","text":"We are waiting for your contributions to datamodel-code-generator .","title":"Contribute"},{"location":"development-contributing/#how-to-contribute","text":"## 1. Clone your fork repository $ git clone git@github.com:<your username>/datamodel-code-generator.git $ cd datamodel-code-generator ## 2. Install [poetry](https://github.com/python-poetry/poetry) $ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python ## 3. Install dependencies $ poetry install ## 4. Create new branch and rewrite code. $ git checkout -b new-branch ## 5. Run unittest (you should pass all test and coverage should be 100%) $ poeyry run ./scripts/test.sh ## 6. Format code $ poeyry run ./scripts/format.sh ## 7. Check lint (mypy) $ poeyry run ./scripts/lint.sh ## 8. Commit and Push...","title":"How to contribute"},{"location":"field-constraints/","text":"Field Constraints An option --field-constraints converts all con* annotations to Field constraint options. Mypy may show error for con* annotations on fields. The option resolves the problem. Example Convert simple JSON Schema model.json to pydantic model model.py Input JSON Schema model.json { \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"maxLength\" : 64 } }, \"required\" : [ \"name\" ] } Without --field-constraints option $ datamodel-codegen --input a.json --input-file-type jsonschema > model.py Generated Model model.py # generated by datamodel-codegen: # filename: model.json # timestamp: 2020-07-20T15:37:56+00:00 from __future__ import annotations from pydantic import BaseModel , constr class Model ( BaseModel ): name : constr ( max_length = 64 ) Run mypy... $ mypy model.py model.py:3: error: Invalid type comment or annotation model.py:3: note: Suggestion: use constr [ ... ] instead of constr ( ... ) Found 1 error in 1 file ( checked 1 source file ) mypy show errors... With --field-constraints option $ datamodel-codegen --input model.json --input-file-type jsonschema --field-constraints > model.py Generated Model model.py # generated by datamodel-codegen: # filename: model.json # timestamp: 2020-07-20T15:47:21+00:00 from __future__ import annotations from pydantic import BaseModel , Field class Model ( BaseModel ): name : str = Field ( ... , max_length = 64 ) Run mypy... $ mypy model.py Success: no issues found in 1 source file Related issues https://github.com/samuelcolvin/pydantic/issues/156","title":"Field Constraints"},{"location":"field-constraints/#field-constraints","text":"An option --field-constraints converts all con* annotations to Field constraint options. Mypy may show error for con* annotations on fields. The option resolves the problem.","title":"Field Constraints"},{"location":"field-constraints/#example","text":"Convert simple JSON Schema model.json to pydantic model model.py Input JSON Schema model.json { \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" , \"maxLength\" : 64 } }, \"required\" : [ \"name\" ] }","title":"Example"},{"location":"field-constraints/#without-field-constraints-option","text":"$ datamodel-codegen --input a.json --input-file-type jsonschema > model.py Generated Model model.py # generated by datamodel-codegen: # filename: model.json # timestamp: 2020-07-20T15:37:56+00:00 from __future__ import annotations from pydantic import BaseModel , constr class Model ( BaseModel ): name : constr ( max_length = 64 ) Run mypy... $ mypy model.py model.py:3: error: Invalid type comment or annotation model.py:3: note: Suggestion: use constr [ ... ] instead of constr ( ... ) Found 1 error in 1 file ( checked 1 source file ) mypy show errors...","title":"Without --field-constraints option"},{"location":"field-constraints/#with-field-constraints-option","text":"$ datamodel-codegen --input model.json --input-file-type jsonschema --field-constraints > model.py Generated Model model.py # generated by datamodel-codegen: # filename: model.json # timestamp: 2020-07-20T15:47:21+00:00 from __future__ import annotations from pydantic import BaseModel , Field class Model ( BaseModel ): name : str = Field ( ... , max_length = 64 ) Run mypy... $ mypy model.py Success: no issues found in 1 source file","title":"With --field-constraints option"},{"location":"field-constraints/#related-issues","text":"https://github.com/samuelcolvin/pydantic/issues/156","title":"Related issues"},{"location":"formatting/","text":"Formatting Code generated by datamodel-codegen will be passed through isort and black to produce consistent, well-formatted results. Settings for these tools can be specified in pyproject.toml (located in the output directory, or in some parent of the output directory). Example pyproject.toml : [tool.black] skip-string-normalization = true line-length = 100 [tool.isort] multi_line_output = 3 include_trailing_comma = true force_grid_wrap = 0 use_parentheses = true line_length = 100 known_first_party = \"kelvin\" See the Black Project for more information.","title":"Formatting"},{"location":"formatting/#formatting","text":"Code generated by datamodel-codegen will be passed through isort and black to produce consistent, well-formatted results. Settings for these tools can be specified in pyproject.toml (located in the output directory, or in some parent of the output directory). Example pyproject.toml : [tool.black] skip-string-normalization = true line-length = 100 [tool.isort] multi_line_output = 3 include_trailing_comma = true force_grid_wrap = 0 use_parentheses = true line_length = 100 known_first_party = \"kelvin\" See the Black Project for more information.","title":"Formatting"},{"location":"jsondata/","text":"Generate from JsonData The codegen generate pydantic models from JSON Data Example $ datamodel-codegen --input pets.json --input-file-type json --output model.py pets.json : { \"pets\" : [ { \"name\" : \"dog\" , \"age\" : 2 }, { \"name\" : \"cat\" , \"age\" : 1 }, { \"name\" : \"snake\" , \"age\" : 3 , \"nickname\" : \"python\" } ], \"status\" : 200 } model.py : # generated by datamodel-codegen: # filename: pets.json # timestamp: 2020-04-27T16:08:21+00:00 from __future__ import annotations from typing import List , Optional from pydantic import BaseModel class Pet ( BaseModel ): name : str age : int nickname : Optional [ str ] = None class Model ( BaseModel ): pets : List [ Pet ] status : int","title":"Generate from JSON Data"},{"location":"jsondata/#generate-from-jsondata","text":"The codegen generate pydantic models from JSON Data","title":"Generate from JsonData"},{"location":"jsondata/#example","text":"$ datamodel-codegen --input pets.json --input-file-type json --output model.py pets.json : { \"pets\" : [ { \"name\" : \"dog\" , \"age\" : 2 }, { \"name\" : \"cat\" , \"age\" : 1 }, { \"name\" : \"snake\" , \"age\" : 3 , \"nickname\" : \"python\" } ], \"status\" : 200 } model.py : # generated by datamodel-codegen: # filename: pets.json # timestamp: 2020-04-27T16:08:21+00:00 from __future__ import annotations from typing import List , Optional from pydantic import BaseModel class Pet ( BaseModel ): name : str age : int nickname : Optional [ str ] = None class Model ( BaseModel ): pets : List [ Pet ] status : int","title":"Example"},{"location":"jsonschema/","text":"Generate from JsonSchema The codegen generate pydantic models from JSON Schema Example $ datamodel-codegen --input person.json --input-file-type jsonschema --output model.py person.json : { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"Person\" , \"type\" : \"object\" , \"properties\" : { \"firstName\" : { \"type\" : \"string\" , \"description\" : \"The person's first name.\" }, \"lastName\" : { \"type\" : \"string\" , \"description\" : \"The person's last name.\" }, \"age\" : { \"description\" : \"Age in years which must be equal to or greater than zero.\" , \"type\" : \"integer\" , \"minimum\" : 0 }, \"friends\" : { \"type\" : \"array\" }, \"comment\" : { \"type\" : \"null\" } } } model.py : # generated by datamodel-codegen: # filename: person.json # timestamp: 2020-04-27T16:12:27+00:00 from __future__ import annotations from typing import Any , List , Optional from pydantic import BaseModel , Field , conint class Person ( BaseModel ): firstName : Optional [ str ] = Field ( None , description = \"The person's first name.\" ) lastName : Optional [ str ] = Field ( None , description = \"The person's last name.\" ) age : Optional [ conint ( ge = 0 )] = Field ( None , description = 'Age in years which must be equal to or greater than zero.' ) friends : Optional [ List ] = None comment : Optional [ Any ] = None","title":"Generate from JSON Schema"},{"location":"jsonschema/#generate-from-jsonschema","text":"The codegen generate pydantic models from JSON Schema","title":"Generate from JsonSchema"},{"location":"jsonschema/#example","text":"$ datamodel-codegen --input person.json --input-file-type jsonschema --output model.py person.json : { \"$schema\" : \"http://json-schema.org/draft-07/schema#\" , \"title\" : \"Person\" , \"type\" : \"object\" , \"properties\" : { \"firstName\" : { \"type\" : \"string\" , \"description\" : \"The person's first name.\" }, \"lastName\" : { \"type\" : \"string\" , \"description\" : \"The person's last name.\" }, \"age\" : { \"description\" : \"Age in years which must be equal to or greater than zero.\" , \"type\" : \"integer\" , \"minimum\" : 0 }, \"friends\" : { \"type\" : \"array\" }, \"comment\" : { \"type\" : \"null\" } } } model.py : # generated by datamodel-codegen: # filename: person.json # timestamp: 2020-04-27T16:12:27+00:00 from __future__ import annotations from typing import Any , List , Optional from pydantic import BaseModel , Field , conint class Person ( BaseModel ): firstName : Optional [ str ] = Field ( None , description = \"The person's first name.\" ) lastName : Optional [ str ] = Field ( None , description = \"The person's last name.\" ) age : Optional [ conint ( ge = 0 )] = Field ( None , description = 'Age in years which must be equal to or greater than zero.' ) friends : Optional [ List ] = None comment : Optional [ Any ] = None","title":"Example"},{"location":"openapi/","text":"Generate from OpenAPI The codegen generate pydantic models from OpenAPI Example $ datamodel-codegen --input api.yaml --input-file-type openapi --output model.py api.yaml openapi : \"3.0.0\" info : version : 1.0.0 title : Swagger Petstore license : name : MIT servers : - url : http://petstore.swagger.io/v1 paths : /pets : get : summary : List all pets operationId : listPets tags : - pets parameters : - name : limit in : query description : How many items to return at one time (max 100) required : false schema : type : integer format : int32 responses : '200' : description : A paged array of pets headers : x-next : description : A link to the next page of responses schema : type : string content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy post : summary : Create a pet operationId : createPets tags : - pets responses : '201' : description : Null response default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy /pets/{petId} : get : summary : Info for a specific pet operationId : showPetById tags : - pets parameters : - name : petId in : path required : true description : The id of the pet to retrieve schema : type : string responses : '200' : description : Expected response to a valid request content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy components : schemas : Pet : required : - id - name properties : id : type : integer format : int64 name : type : string tag : type : string Pets : type : array items : $ref : \"#/components/schemas/Pet\" Error : required : - code - message properties : code : type : integer format : int32 message : type : string apis : type : array items : type : object properties : apiKey : type : string description : To be used as a dataset parameter value apiVersionNumber : type : string description : To be used as a version parameter value apiUrl : type : string format : uri description : \"The URL describing the dataset's fields\" apiDocumentationUrl : type : string format : uri description : A URL to the API console for each API model.py : # generated by datamodel-codegen: # filename: api.yaml # timestamp: 2020-06-02T05:28:24+00:00 from __future__ import annotations from typing import List , Optional from pydantic import AnyUrl , BaseModel , Field class Pet ( BaseModel ): id : int name : str tag : Optional [ str ] = None class Pets ( BaseModel ): __root__ : List [ Pet ] class Error ( BaseModel ): code : int message : str class Api ( BaseModel ): apiKey : Optional [ str ] = Field ( None , description = 'To be used as a dataset parameter value' ) apiVersionNumber : Optional [ str ] = Field ( None , description = 'To be used as a version parameter value' ) apiUrl : Optional [ AnyUrl ] = Field ( None , description = \"The URL describing the dataset's fields\" ) apiDocumentationUrl : Optional [ AnyUrl ] = Field ( None , description = 'A URL to the API console for each API' ) class Apis ( BaseModel ): __root__ : List [ Api ]","title":"Generate from OpenAPI"},{"location":"openapi/#generate-from-openapi","text":"The codegen generate pydantic models from OpenAPI","title":"Generate from OpenAPI"},{"location":"openapi/#example","text":"$ datamodel-codegen --input api.yaml --input-file-type openapi --output model.py api.yaml openapi : \"3.0.0\" info : version : 1.0.0 title : Swagger Petstore license : name : MIT servers : - url : http://petstore.swagger.io/v1 paths : /pets : get : summary : List all pets operationId : listPets tags : - pets parameters : - name : limit in : query description : How many items to return at one time (max 100) required : false schema : type : integer format : int32 responses : '200' : description : A paged array of pets headers : x-next : description : A link to the next page of responses schema : type : string content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy post : summary : Create a pet operationId : createPets tags : - pets responses : '201' : description : Null response default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy /pets/{petId} : get : summary : Info for a specific pet operationId : showPetById tags : - pets parameters : - name : petId in : path required : true description : The id of the pet to retrieve schema : type : string responses : '200' : description : Expected response to a valid request content : application/json : schema : $ref : \"#/components/schemas/Pets\" default : description : unexpected error content : application/json : schema : $ref : \"#/components/schemas/Error\" x-amazon-apigateway-integration : uri : Fn::Sub : arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior : when_no_templates httpMethod : POST type : aws_proxy components : schemas : Pet : required : - id - name properties : id : type : integer format : int64 name : type : string tag : type : string Pets : type : array items : $ref : \"#/components/schemas/Pet\" Error : required : - code - message properties : code : type : integer format : int32 message : type : string apis : type : array items : type : object properties : apiKey : type : string description : To be used as a dataset parameter value apiVersionNumber : type : string description : To be used as a version parameter value apiUrl : type : string format : uri description : \"The URL describing the dataset's fields\" apiDocumentationUrl : type : string format : uri description : A URL to the API console for each API model.py : # generated by datamodel-codegen: # filename: api.yaml # timestamp: 2020-06-02T05:28:24+00:00 from __future__ import annotations from typing import List , Optional from pydantic import AnyUrl , BaseModel , Field class Pet ( BaseModel ): id : int name : str tag : Optional [ str ] = None class Pets ( BaseModel ): __root__ : List [ Pet ] class Error ( BaseModel ): code : int message : str class Api ( BaseModel ): apiKey : Optional [ str ] = Field ( None , description = 'To be used as a dataset parameter value' ) apiVersionNumber : Optional [ str ] = Field ( None , description = 'To be used as a version parameter value' ) apiUrl : Optional [ AnyUrl ] = Field ( None , description = \"The URL describing the dataset's fields\" ) apiDocumentationUrl : Optional [ AnyUrl ] = Field ( None , description = 'A URL to the API console for each API' ) class Apis ( BaseModel ): __root__ : List [ Api ]","title":"Example"},{"location":"pyproject_toml/","text":"datamodel-code-generator has a lot of command-line options. The options are supported on pyproject.toml . Example pyproject.toml : [tool.datamodel-codegen] field-constraints = true snake-case-field = true strip-default-none = false target-python-version = \"3.7\"","title":"pyproject.toml"},{"location":"support-data-types/","text":"Target Source files OpenAPI 3 (YAML/JSON, OpenAPI Data Type ) JSON Schema ( JSON Schema Core / JSON Schema Validation ) JSON/YAML Data (it will be converted to JSON Schema) Python dictionary (it will be converted to JSON Schema) Implemented list This codegen supports major data types to OpenAPI/JSON Schema OpenAPI 3 and JsonSchema DataType string (include patter/minLength/maxLenght) number (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) integer (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) boolean array object String Format date datetime time password email idn-email uuid (uuid1/uuid2/uuid3/uuid4/uuid5) ipv4 ipv6 hostname decimal Other schema enum (as enum.Enum or typing.Literal) allOf (as Multiple inheritance) anyOf (as typing.Union) oneOf (as typing.Union) $ref ( http extra is required when resolving $ref for remote files.) $id (for JSONSchema )","title":"Support data types"},{"location":"support-data-types/#target-source-files","text":"OpenAPI 3 (YAML/JSON, OpenAPI Data Type ) JSON Schema ( JSON Schema Core / JSON Schema Validation ) JSON/YAML Data (it will be converted to JSON Schema) Python dictionary (it will be converted to JSON Schema)","title":"Target Source files"},{"location":"support-data-types/#implemented-list","text":"This codegen supports major data types to OpenAPI/JSON Schema","title":"Implemented list"},{"location":"support-data-types/#openapi-3-and-jsonschema","text":"","title":"OpenAPI 3 and JsonSchema"},{"location":"support-data-types/#datatype","text":"string (include patter/minLength/maxLenght) number (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) integer (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge) boolean array object","title":"DataType"},{"location":"support-data-types/#string-format","text":"date datetime time password email idn-email uuid (uuid1/uuid2/uuid3/uuid4/uuid5) ipv4 ipv6 hostname decimal","title":"String Format"},{"location":"support-data-types/#other-schema","text":"enum (as enum.Enum or typing.Literal) allOf (as Multiple inheritance) anyOf (as typing.Union) oneOf (as typing.Union) $ref ( http extra is required when resolving $ref for remote files.) $id (for JSONSchema )","title":"Other schema"},{"location":"using_as_module/","text":"Using as module datamodel-code-generator is a CLI. But, it has another side as a python module. You can call this code-generator in your python code. How to use it as module You can generate models with datamodel_code_generator.generate into a temporary directory. And, you can read files from the directory. Installation pip install \"datamodel-code-generator[http]\" Example from pathlib import Path from tempfile import TemporaryDirectory from datamodel_code_generator import InputFileType , generate json_schema : str = \"\"\"{ \"type\": \"object\", \"properties\": { \"number\": {\"type\": \"number\"}, \"street_name\": {\"type\": \"string\"}, \"street_type\": {\"type\": \"string\", \"enum\": [\"Street\", \"Avenue\", \"Boulevard\"] } } }\"\"\" with TemporaryDirectory () as temporary_directory_name : temporary_directory = Path ( temporary_directory_name ) output = Path ( temporary_directory / 'model.py' ) generate ( json_schema , input_file_type = InputFileType . JsonSchema , input_filename = \"example.json\" , output = output , ) model : str = output . read_text () print ( model ) The result of print(model) # generated by datamodel-codegen: # filename: example.json # timestamp: 2020-12-21T08:01:06+00:00 from __future__ import annotations from enum import Enum from typing import Optional from pydantic import BaseModel class StreetType ( Enum ): Street = 'Street' Avenue = 'Avenue' Boulevard = 'Boulevard' class Model ( BaseModel ): number : Optional [ float ] = None street_name : Optional [ str ] = None street_type : Optional [ StreetType ] = None Why doesn't the function return str? If generated code are modular files then, str can't reproduce the structure of modules. Also, TemporaryDirectory and Path provide an easy way to read files. There is an example when a generated model file is only one. Otherwise, You should walk in a directory to find modular files. Related projects fastapi-code-generator uses datamodel-code-generator as module to create models from OpenAPI.","title":"Using as module"},{"location":"using_as_module/#using-as-module","text":"datamodel-code-generator is a CLI. But, it has another side as a python module. You can call this code-generator in your python code.","title":"Using as module"},{"location":"using_as_module/#how-to-use-it-as-module","text":"You can generate models with datamodel_code_generator.generate into a temporary directory. And, you can read files from the directory.","title":"How to use it as module"},{"location":"using_as_module/#installation","text":"pip install \"datamodel-code-generator[http]\"","title":"Installation"},{"location":"using_as_module/#example","text":"from pathlib import Path from tempfile import TemporaryDirectory from datamodel_code_generator import InputFileType , generate json_schema : str = \"\"\"{ \"type\": \"object\", \"properties\": { \"number\": {\"type\": \"number\"}, \"street_name\": {\"type\": \"string\"}, \"street_type\": {\"type\": \"string\", \"enum\": [\"Street\", \"Avenue\", \"Boulevard\"] } } }\"\"\" with TemporaryDirectory () as temporary_directory_name : temporary_directory = Path ( temporary_directory_name ) output = Path ( temporary_directory / 'model.py' ) generate ( json_schema , input_file_type = InputFileType . JsonSchema , input_filename = \"example.json\" , output = output , ) model : str = output . read_text () print ( model ) The result of print(model) # generated by datamodel-codegen: # filename: example.json # timestamp: 2020-12-21T08:01:06+00:00 from __future__ import annotations from enum import Enum from typing import Optional from pydantic import BaseModel class StreetType ( Enum ): Street = 'Street' Avenue = 'Avenue' Boulevard = 'Boulevard' class Model ( BaseModel ): number : Optional [ float ] = None street_name : Optional [ str ] = None street_type : Optional [ StreetType ] = None","title":"Example"},{"location":"using_as_module/#why-doesnt-the-function-return-str","text":"If generated code are modular files then, str can't reproduce the structure of modules. Also, TemporaryDirectory and Path provide an easy way to read files. There is an example when a generated model file is only one. Otherwise, You should walk in a directory to find modular files.","title":"Why doesn't the function return str?"},{"location":"using_as_module/#related-projects","text":"fastapi-code-generator uses datamodel-code-generator as module to create models from OpenAPI.","title":"Related projects"}]}