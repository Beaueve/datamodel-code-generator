{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"datamodel-code-generator","text":"<p>This code generator creates pydantic model from an openapi file and others.</p> <p> </p>"},{"location":"#help","title":"Help","text":"<p>See documentation for more details.</p>"},{"location":"#sponsors","title":"Sponsors","text":""},{"location":"#quick-installation","title":"Quick Installation","text":"<p>To install <code>datamodel-code-generator</code>:</p> <pre><code>$ pip install datamodel-code-generator\n</code></pre>"},{"location":"#simple-usage","title":"Simple usage","text":"<p>You can generate models from a local file.</p> <pre><code>$ datamodel-codegen --input api.yaml --output model.py\n</code></pre> api.yaml <pre><code>openapi: \"3.0.0\"\ninfo:\nversion: 1.0.0\ntitle: Swagger Petstore\nlicense:\nname: MIT\nservers:\n- url: http://petstore.swagger.io/v1\npaths:\n/pets:\nget:\nsummary: List all pets\noperationId: listPets\ntags:\n- pets\nparameters:\n- name: limit\nin: query\ndescription: How many items to return at one time (max 100)\nrequired: false\nschema:\ntype: integer\nformat: int32\nresponses:\n'200':\ndescription: A paged array of pets\nheaders:\nx-next:\ndescription: A link to the next page of responses\nschema:\ntype: string\ncontent:\napplication/json:\nschema:\n$ref: \"#/components/schemas/Pets\"\ndefault:\ndescription: unexpected error\ncontent:\napplication/json:\nschema:\n$ref: \"#/components/schemas/Error\"\nx-amazon-apigateway-integration:\nuri:\nFn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\npassthroughBehavior: when_no_templates\nhttpMethod: POST\ntype: aws_proxy\npost:\nsummary: Create a pet\noperationId: createPets\ntags:\n- pets\nresponses:\n'201':\ndescription: Null response\ndefault:\ndescription: unexpected error\ncontent:\napplication/json:\nschema:\n$ref: \"#/components/schemas/Error\"\nx-amazon-apigateway-integration:\nuri:\nFn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\npassthroughBehavior: when_no_templates\nhttpMethod: POST\ntype: aws_proxy\n/pets/{petId}:\nget:\nsummary: Info for a specific pet\noperationId: showPetById\ntags:\n- pets\nparameters:\n- name: petId\nin: path\nrequired: true\ndescription: The id of the pet to retrieve\nschema:\ntype: string\nresponses:\n'200':\ndescription: Expected response to a valid request\ncontent:\napplication/json:\nschema:\n$ref: \"#/components/schemas/Pets\"\ndefault:\ndescription: unexpected error\ncontent:\napplication/json:\nschema:\n$ref: \"#/components/schemas/Error\"\nx-amazon-apigateway-integration:\nuri:\nFn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\npassthroughBehavior: when_no_templates\nhttpMethod: POST\ntype: aws_proxy\ncomponents:\nschemas:\nPet:\nrequired:\n- id\n- name\nproperties:\nid:\ntype: integer\nformat: int64\nname:\ntype: string\ntag:\ntype: string\nPets:\ntype: array\nitems:\n$ref: \"#/components/schemas/Pet\"\nError:\nrequired:\n- code\n- message\nproperties:\ncode:\ntype: integer\nformat: int32\nmessage:\ntype: string\napis:\ntype: array\nitems:\ntype: object\nproperties:\napiKey:\ntype: string\ndescription: To be used as a dataset parameter value\napiVersionNumber:\ntype: string\ndescription: To be used as a version parameter value\napiUrl:\ntype: string\nformat: uri\ndescription: \"The URL describing the dataset's fields\"\napiDocumentationUrl:\ntype: string\nformat: uri\ndescription: A URL to the API console for each API\n</code></pre> model.py <pre><code># generated by datamodel-codegen:\n#   filename:  api.yaml\n#   timestamp: 2020-06-02T05:28:24+00:00\n\nfrom __future__ import annotations\n\nfrom typing import List, Optional\n\nfrom pydantic import AnyUrl, BaseModel, Field\n\n\nclass Pet(BaseModel):\n    id: int\n    name: str\n    tag: Optional[str] = None\n\n\nclass Pets(BaseModel):\n    __root__: List[Pet]\n\n\nclass Error(BaseModel):\n    code: int\n    message: str\n\n\nclass Api(BaseModel):\n    apiKey: Optional[str] = Field(\n        None, description='To be used as a dataset parameter value'\n    )\n    apiVersionNumber: Optional[str] = Field(\n        None, description='To be used as a version parameter value'\n    )\n    apiUrl: Optional[AnyUrl] = Field(\n        None, description=\"The URL describing the dataset's fields\"\n    )\n    apiDocumentationUrl: Optional[AnyUrl] = Field(\n        None, description='A URL to the API console for each API'\n    )\n\n\nclass Apis(BaseModel):\n    __root__: List[Api]\n</code></pre>"},{"location":"#which-project-uses-it","title":"Which project uses it?","text":"<p>These OSS use datamodel-code-generator to generate many models. We can learn about use-cases from these projects. - Netflix/consoleme   - How do I generate models from the Swagger specification? - DataDog/integrations-core   - Config models - awslabs/aws-lambda-powertools-python   - Not used. But, introduced advanced-use-cases in the official docuemnt - open-metadata/OpenMetadata   - Makefile - airbytehq/airbyte   - code-generator/Dockerfile - IBM/compliance-trestle   - Building the models from the OSCAL schemas. - SeldonIO/MLServer   - generate-types.sh</p>"},{"location":"#supported-source-types","title":"Supported source types","text":"<ul> <li>OpenAPI 3 (YAML/JSON, OpenAPI Data Type)</li> <li>JSON Schema (JSON Schema Core/JSON Schema Validation)</li> <li>JSON/YAML/CSV Data (it will be converted to JSON Schema)</li> <li>Python dictionary (it will be converted to JSON Schema)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install <code>datamodel-code-generator</code>:</p> <pre><code>$ pip install datamodel-code-generator\n</code></pre>"},{"location":"#http-extra-option","title":"<code>http</code> extra option","text":"<p>If you want to resolve <code>$ref</code> for remote files then you should specify <code>http</code> extra option.</p> <pre><code>$ pip install datamodel-code-generator[http]\n</code></pre>"},{"location":"#docker-image","title":"Docker Image","text":"<p>The docker image is in Docker Hub</p> <pre><code>$ docker pull koxudaxi/datamodel-code-generator\n</code></pre>"},{"location":"#advanced-uses","title":"Advanced Uses","text":"<p>You can genearte models from a URL.</p> <pre><code>$ datamodel-codegen --url https://&lt;INPUT FILE URL&gt; --output model.py\n</code></pre> <p>This method needs  http extra option</p>"},{"location":"#all-command-options","title":"All Command Options","text":"<p>The <code>datamodel-codegen</code> command:</p> <pre><code>usage: datamodel-codegen [-h] [--input INPUT] [--url URL]\n[--http-headers HTTP_HEADER [HTTP_HEADER ...]]\n[--http-ignore-tls]\n[--input-file-type {auto,openapi,jsonschema,json,yaml,dict,csv}]\n[--openapi-scopes {schemas,paths,tags} [{schemas,paths,tags} ...]]\n[--output OUTPUT] [--base-class BASE_CLASS]\n[--field-constraints] [--use-annotated]\n[--use_non_positive_negative_number_constrained_types]\n[--field-extra-keys FIELD_EXTRA_KEYS [FIELD_EXTRA_KEYS ...]]\n[--field-include-all-keys] [--snake-case-field]\n[--original-field-name-delimiter ORIGINAL_FIELD_NAME_DELIMITER]\n[--strip-default-none]\n[--disable-appending-item-suffix]\n[--allow-population-by-field-name]\n[--allow-extra-fields] [--enable-faux-immutability]\n[--use-default] [--force-optional]\n[--strict-nullable]\n[--strict-types {str,bytes,int,float,bool} [{str,bytes,int,float,bool} ...]]\n[--disable-timestamp] [--use-standard-collections]\n[--use-generic-container-types]\n[--use-union-operator] [--use-schema-description]\n[--use-field-description] [--use-default-kwarg]\n[--reuse-model] [--keep-model-order]\n[--collapse-root-models]\n[--enum-field-as-literal {all,one}]\n[--set-default-enum-member]\n[--empty-enum-field-name EMPTY_ENUM_FIELD_NAME]\n[--capitalise-enum-members]\n[--special-field-name-prefix SPECIAL_FIELD_NAME_PREFIX]\n[--remove-special-field-name-prefix]\n[--use-subclass-enum] [--class-name CLASS_NAME]\n[--use-title-as-name]\n[--custom-template-dir CUSTOM_TEMPLATE_DIR]\n[--extra-template-data EXTRA_TEMPLATE_DATA]\n[--aliases ALIASES]\n[--target-python-version {3.6,3.7,3.8,3.9,3.10,3.11}]\n[--wrap-string-literal] [--validation]\n[--use-double-quotes] [--encoding ENCODING] [--debug]\n[--disable-warnings] [--version]\n\noptions:\n  -h, --help            show this help message and exit\n--input INPUT         Input file/directory (default: stdin)\n--url URL             Input file URL. `--input` is ignored when `--url` is\n                        used\n  --http-headers HTTP_HEADER [HTTP_HEADER ...]\nSet headers in HTTP requests to the remote host.\n                        (example: \"Authorization: Basic dXNlcjpwYXNz\")\n--http-ignore-tls     Disable verification of the remote host's TLS\n                        certificate\n  --input-file-type {auto,openapi,jsonschema,json,yaml,dict,csv}\n                        Input file type (default: auto)\n  --openapi-scopes {schemas,paths,tags} [{schemas,paths,tags} ...]\n                        Scopes of OpenAPI model generation (default: schemas)\n  --output OUTPUT       Output file (default: stdout)\n  --base-class BASE_CLASS\n                        Base Class (default: pydantic.BaseModel)\n  --field-constraints   Use field constraints and not con* annotations\n  --use-annotated       Use typing.Annotated for Field(). Also, `--field-\n                        constraints` option will be enabled.\n  --use_non_positive_negative_number_constrained_types\n                        Use the Non{Positive,Negative}{FloatInt} types instead\n                        of the corresponding con* constrained types.\n  --field-extra-keys FIELD_EXTRA_KEYS [FIELD_EXTRA_KEYS ...]\n                        Add extra keys to field parameters\n  --field-include-all-keys\n                        Add all keys to field parameters\n  --snake-case-field    Change camel-case field name to snake-case\n  --original-field-name-delimiter ORIGINAL_FIELD_NAME_DELIMITER\n                        Set delimiter to convert to snake case. This option\n                        only can be used with --snake-case-field (default: `_`\n                        )\n  --strip-default-none  Strip default None on fields\n  --disable-appending-item-suffix\n                        Disable appending `Item` suffix to model name in an\n                        array\n  --allow-population-by-field-name\n                        Allow population by field name\n  --allow-extra-fields  Allow to pass extra fields, if this flag is not\n                        passed, extra fields are forbidden.\n  --enable-faux-immutability\n                        Enable faux immutability\n  --use-default         Use default value even if a field is required\n  --force-optional      Force optional for required fields\n  --strict-nullable     Treat default field as a non-nullable field (Only\n                        OpenAPI)\n  --strict-types {str,bytes,int,float,bool} [{str,bytes,int,float,bool} ...]\n                        Use strict types\n  --disable-timestamp   Disable timestamp on file headers\n  --use-standard-collections\n                        Use standard collections for type hinting (list, dict)\n  --use-generic-container-types\n                        Use generic container types for type hinting\n                        (typing.Sequence, typing.Mapping). If `--use-standard-\n                        collections` option is set, then import from\n                        collections.abc instead of typing\n  --use-union-operator  Use | operator for Union type (PEP 604).\n  --use-schema-description\n                        Use schema description to populate class docstring\n  --use-field-description\n                        Use schema description to populate field docstring\n  --use-default-kwarg   Use `default=` instead of a positional argument for\n                        Fields that have default values.\n  --reuse-model         Re-use models on the field when a module has the model\n                        with the same content\n  --keep-model-order    Keep generated models' order\n  --collapse-root-models\n                        Models generated with a root-type field will be\n                        mergedinto the models using that root-type model\n  --enum-field-as-literal {all,one}\nParse enum field as literal. all: all enum field type\nare Literal. one: field type is Literal when an enum\n                        has only one possible value\n  --set-default-enum-member\n                        Set enum members as default values for enum field\n  --empty-enum-field-name EMPTY_ENUM_FIELD_NAME\n                        Set field name when enum value is empty (default: `_`)\n--capitalise-enum-members\n                        Capitalize field names on enum\n  --special-field-name-prefix SPECIAL_FIELD_NAME_PREFIX\n                        Set field name prefix when first character can't be\n                        used as Python field name (default: `field`)\n  --remove-special-field-name-prefix\n                        Remove field name prefix when first character can't be\n                        used as Python field name\n  --use-subclass-enum   Define Enum class as subclass with field type when\n                        enum has type (int, float, bytes, str)\n--class-name CLASS_NAME\n                        Set class name of root model\n  --use-title-as-name   use titles as class names of models\n  --custom-template-dir CUSTOM_TEMPLATE_DIR\n                        Custom template directory\n  --extra-template-data EXTRA_TEMPLATE_DATA\n                        Extra template data\n  --aliases ALIASES     Alias mapping file\n  --target-python-version {3.6,3.7,3.8,3.9,3.10,3.11}\ntarget python version (default: 3.7)\n--wrap-string-literal\n                        Wrap string literal by using black `experimental-\n                        string-processing` option (require black 20.8b0 or\n                        later)\n--validation          Enable validation (Only OpenAPI)\n--use-double-quotes   Model generated with double quotes. Single quotes or\n                        your black config skip_string_normalization value will\n                        be used without this option.\n  --encoding ENCODING   The encoding of input and output (default: cp1252)\n--debug               show debug message\n  --disable-warnings    disable warnings\n  --version             show version\n</code></pre>"},{"location":"#implemented-list","title":"Implemented list","text":""},{"location":"#openapi-3-and-jsonschema","title":"OpenAPI 3 and JsonSchema","text":""},{"location":"#datatype","title":"DataType","text":"<ul> <li>string (include patter/minLength/maxLenght)</li> <li>number (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge)</li> <li>integer (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge)</li> <li>boolean</li> <li>array</li> <li>object</li> </ul>"},{"location":"#string-format","title":"String Format","text":"<ul> <li>date</li> <li>datetime</li> <li>time</li> <li>password</li> <li>email</li> <li>idn-email</li> <li>uuid (uuid1/uuid2/uuid3/uuid4/uuid5)</li> <li>ipv4</li> <li>ipv6</li> <li>ipv4-network</li> <li>ipv6-network</li> <li>hostname</li> <li>decimal</li> </ul>"},{"location":"#other-schema","title":"Other schema","text":"<ul> <li>enum (as enum.Enum or typing.Literal)</li> <li>allOf (as Multiple inheritance)</li> <li>anyOf (as typing.Union)</li> <li>oneOf (as typing.Union)</li> <li>$ref (http extra is required when resolving $ref for remote files.)</li> <li>$id (for JSONSchema)</li> </ul>"},{"location":"#related-projects","title":"Related projects","text":""},{"location":"#fastapi-code-generator","title":"fastapi-code-generator","text":"<p>This code generator creates FastAPI app from an openapi file.</p> <p>https://github.com/koxudaxi/fastapi-code-generator</p>"},{"location":"#pydantic-pycharm-plugin","title":"pydantic-pycharm-plugin","text":"<p>A JetBrains PyCharm plugin for <code>pydantic</code>.</p> <p>https://github.com/koxudaxi/pydantic-pycharm-plugin</p>"},{"location":"#pypi","title":"PyPi","text":"<p>https://pypi.org/project/datamodel-code-generator</p>"},{"location":"#license","title":"License","text":"<p>datamodel-code-generator is released under the MIT License. http://www.opensource.org/licenses/mit-license</p>"},{"location":"development-contributing/","title":"Development","text":"<p>Install the package in editable mode:</p> <pre><code>$ git clone git@github.com:koxudaxi/datamodel-code-generator.git\n$ pip install -e datamodel-code-generator\n</code></pre>"},{"location":"development-contributing/#contribute","title":"Contribute","text":"<p>We are waiting for your contributions to <code>datamodel-code-generator</code>.</p>"},{"location":"development-contributing/#how-to-contribute","title":"How to contribute","text":"<pre><code>## 1. Clone your fork repository\n$ git clone git@github.com:&lt;your username&gt;/datamodel-code-generator.git\n$ cd datamodel-code-generator\n\n## 2. Install [poetry](https://github.com/python-poetry/poetry)\n$ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python ## 3. Install dependencies\n$ poetry install\n\n## 4. Create new branch and rewrite code.\n$ git checkout -b new-branch\n\n## 5. Run unittest (you should pass all test and coverage should be 100%)\n$ poetry run ./scripts/test.sh\n\n## 6. Format code\n$ poetry run ./scripts/format.sh\n\n## 7. Check lint (mypy)\n$ poetry run ./scripts/lint.sh\n\n## 8. Commit and Push...\n</code></pre>"},{"location":"field-constraints/","title":"Field Constraints","text":"<p>An option <code>--field-constraints</code> converts all con* annotations to Field constraint options.</p> <p>Mypy may show error for <code>con*</code> annotations on fields. The option resolves the problem.</p>"},{"location":"field-constraints/#example","title":"Example","text":"<p>Convert simple JSON Schema <code>model.json</code> to pydantic model <code>model.py</code></p> <p>Input JSON Schema</p> <p><code>model.json</code></p> <pre><code>{\n\"type\":  \"object\",\n\"properties\": {\n\"name\": {\n\"type\": \"string\",\n\"maxLength\": 64\n}\n},\n\"required\": [\"name\"]\n}\n</code></pre>"},{"location":"field-constraints/#without-field-constraints-option","title":"Without <code>--field-constraints</code> option","text":"<pre><code>$ datamodel-codegen --input a.json --input-file-type jsonschema &gt; model.py </code></pre> <p>Generated Model</p> <p><code>model.py</code> </p> <pre><code># generated by datamodel-codegen:\n#   filename:  model.json\n#   timestamp: 2020-07-20T15:37:56+00:00\n\nfrom __future__ import annotations\n\nfrom pydantic import BaseModel, constr\n\n\nclass  Model(BaseModel):\n  name: constr(max_length=64)\n</code></pre> <p>Run mypy...</p> <pre><code>$ mypy model.py \nmodel.py:3: error: Invalid type comment or annotation\nmodel.py:3: note: Suggestion: use constr[...] instead of constr(...)\nFound 1 error in 1 file (checked 1 source file)\n</code></pre> <p>mypy show errors...</p>"},{"location":"field-constraints/#with-field-constraints-option","title":"With <code>--field-constraints</code> option","text":"<pre><code>$ datamodel-codegen --input model.json --input-file-type jsonschema --field-constraints &gt; model.py </code></pre> <p>Generated Model</p> <p><code>model.py</code> </p> <pre><code># generated by datamodel-codegen:\n#   filename:  model.json\n#   timestamp: 2020-07-20T15:47:21+00:00\n\nfrom __future__ import annotations\n\nfrom pydantic import BaseModel, Field\n\n\nclass Model(BaseModel):\n    name: str = Field(..., max_length=64)\n</code></pre> <p>Run mypy...</p> <pre><code>$ mypy model.py \nSuccess: no issues found in 1 source file\n</code></pre>"},{"location":"field-constraints/#related-issues","title":"Related issues","text":"<p>https://github.com/samuelcolvin/pydantic/issues/156</p>"},{"location":"formatting/","title":"Formatting","text":"<p>Code generated by <code>datamodel-codegen</code> will be passed through <code>isort</code> and <code>black</code> to produce consistent, well-formatted results. Settings for these tools can be specified in <code>pyproject.toml</code> (located in the output directory, or in some parent of the output directory). Also for black you can disable  skip-string-normalization with using datamodel-codegen option <code>--use-double-quotes</code>,  it will override your black config skip-string-normalization value. Using --use-double-quotes may be useful if you can't use black config. </p> <p>Example <code>pyproject.toml</code>:</p> <pre><code>[tool.black]\nskip-string-normalization = true\nline-length = 100\n\n[tool.isort]\nmulti_line_output = 3\ninclude_trailing_comma = true\nforce_grid_wrap = 0\nuse_parentheses = true\nline_length = 100\nknown_first_party = \"kelvin\"\n</code></pre> <p>See the Black Project for more information.</p>"},{"location":"jsondata/","title":"Generate from JsonData","text":"<p>The codegen generate pydantic models from JSON Data</p>"},{"location":"jsondata/#example","title":"Example","text":"<pre><code>$ datamodel-codegen  --input pets.json --input-file-type json --output model.py\n</code></pre> <p><code>pets.json</code>:</p> <pre><code>{\n\"pets\": [\n{\n\"name\": \"dog\",\n\"age\": 2\n},\n{\n\"name\": \"cat\",\n\"age\": 1\n},\n{\n\"name\": \"snake\",\n\"age\": 3,\n\"nickname\": \"python\"\n}\n],\n\"status\": 200\n}\n</code></pre> <p><code>model.py</code>:</p> <pre><code># generated by datamodel-codegen:\n#   filename:  pets.json\n#   timestamp: 2020-04-27T16:08:21+00:00\n\nfrom __future__ import annotations\n\nfrom typing import List, Optional\n\nfrom pydantic import BaseModel\n\n\nclass Pet(BaseModel):\n    name: str\n    age: int\n    nickname: Optional[str] = None\n\n\nclass Model(BaseModel):\n    pets: List[Pet]\n    status: int\n</code></pre>"},{"location":"jsonschema/","title":"Generate from JsonSchema","text":"<p>The codegen generate pydantic models from JSON Schema</p>"},{"location":"jsonschema/#example","title":"Example","text":"<pre><code>$ datamodel-codegen  --input person.json --input-file-type jsonschema --output model.py\n</code></pre> <p><code>person.json</code>:</p> <pre><code>{\n\"$schema\": \"http://json-schema.org/draft-07/schema#\",\n\"title\": \"Person\",\n\"type\": \"object\",\n\"properties\": {\n\"firstName\": {\n\"type\": \"string\",\n\"description\": \"The person's first name.\"\n},\n\"lastName\": {\n\"type\": \"string\",\n\"description\": \"The person's last name.\"\n},\n\"age\": {\n\"description\": \"Age in years which must be equal to or greater than zero.\",\n\"type\": \"integer\",\n\"minimum\": 0\n},\n\"friends\": {\n\"type\": \"array\"\n},\n\"comment\": {\n\"type\": \"null\"\n}\n}\n}\n</code></pre> <p><code>model.py</code>:</p> <pre><code># generated by datamodel-codegen:\n#   filename:  person.json\n#   timestamp: 2020-04-27T16:12:27+00:00\n\nfrom __future__ import annotations\n\nfrom typing import Any, List, Optional\n\nfrom pydantic import BaseModel, Field, conint\n\n\nclass Person(BaseModel):\n    firstName: Optional[str] = Field(None, description=\"The person's first name.\")\n    lastName: Optional[str] = Field(None, description=\"The person's last name.\")\n    age: Optional[conint(ge=0)] = Field(\n        None, description='Age in years which must be equal to or greater than zero.'\n    )\n    friends: Optional[List] = None\n    comment: Optional[Any] = None\n</code></pre>"},{"location":"openapi/","title":"Generate from OpenAPI","text":"<p>The codegen generate pydantic models from OpenAPI</p>"},{"location":"openapi/#example","title":"Example","text":"<pre><code>$ datamodel-codegen --input api.yaml --input-file-type openapi --output model.py\n</code></pre> api.yaml <pre>\n<code>\n\n<pre><code>openapi: \"3.0.0\"\ninfo:\nversion: 1.0.0\ntitle: Swagger Petstore\nlicense:\nname: MIT\nservers:\n- url: http://petstore.swagger.io/v1\npaths:\n/pets:\nget:\nsummary: List all pets\noperationId: listPets\ntags:\n- pets\nparameters:\n- name: limit\nin: query\ndescription: How many items to return at one time (max 100)\nrequired: false\nschema:\ntype: integer\nformat: int32\nresponses:\n'200':\ndescription: A paged array of pets\nheaders:\nx-next:\ndescription: A link to the next page of responses\nschema:\ntype: string\ncontent:\napplication/json:\nschema:\n$ref: \"#/components/schemas/Pets\"\ndefault:\ndescription: unexpected error\ncontent:\napplication/json:\nschema:\n$ref: \"#/components/schemas/Error\"\nx-amazon-apigateway-integration:\nuri:\nFn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\npassthroughBehavior: when_no_templates\nhttpMethod: POST\ntype: aws_proxy\npost:\nsummary: Create a pet\noperationId: createPets\ntags:\n- pets\nresponses:\n'201':\ndescription: Null response\ndefault:\ndescription: unexpected error\ncontent:\napplication/json:\nschema:\n$ref: \"#/components/schemas/Error\"\nx-amazon-apigateway-integration:\nuri:\nFn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\npassthroughBehavior: when_no_templates\nhttpMethod: POST\ntype: aws_proxy\n/pets/{petId}:\nget:\nsummary: Info for a specific pet\noperationId: showPetById\ntags:\n- pets\nparameters:\n- name: petId\nin: path\nrequired: true\ndescription: The id of the pet to retrieve\nschema:\ntype: string\nresponses:\n'200':\ndescription: Expected response to a valid request\ncontent:\napplication/json:\nschema:\n$ref: \"#/components/schemas/Pets\"\ndefault:\ndescription: unexpected error\ncontent:\napplication/json:\nschema:\n$ref: \"#/components/schemas/Error\"\nx-amazon-apigateway-integration:\nuri:\nFn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\npassthroughBehavior: when_no_templates\nhttpMethod: POST\ntype: aws_proxy\ncomponents:\nschemas:\nPet:\nrequired:\n- id\n- name\nproperties:\nid:\ntype: integer\nformat: int64\nname:\ntype: string\ntag:\ntype: string\nPets:\ntype: array\nitems:\n$ref: \"#/components/schemas/Pet\"\nError:\nrequired:\n- code\n- message\nproperties:\ncode:\ntype: integer\nformat: int32\nmessage:\ntype: string\napis:\ntype: array\nitems:\ntype: object\nproperties:\napiKey:\ntype: string\ndescription: To be used as a dataset parameter value\napiVersionNumber:\ntype: string\ndescription: To be used as a version parameter value\napiUrl:\ntype: string\nformat: uri\ndescription: \"The URL describing the dataset's fields\"\napiDocumentationUrl:\ntype: string\nformat: uri\ndescription: A URL to the API console for each API\n</code></pre>\n\n\n</code>\n</pre> <p><code>model.py</code>:</p> <pre><code># generated by datamodel-codegen:\n#   filename:  api.yaml\n#   timestamp: 2020-06-02T05:28:24+00:00\n\nfrom __future__ import annotations\n\nfrom typing import List, Optional\n\nfrom pydantic import AnyUrl, BaseModel, Field\n\n\nclass Pet(BaseModel):\n    id: int\n    name: str\n    tag: Optional[str] = None\n\n\nclass Pets(BaseModel):\n    __root__: List[Pet]\n\n\nclass Error(BaseModel):\n    code: int\n    message: str\n\n\nclass Api(BaseModel):\n    apiKey: Optional[str] = Field(\n        None, description='To be used as a dataset parameter value'\n    )\n    apiVersionNumber: Optional[str] = Field(\n        None, description='To be used as a version parameter value'\n    )\n    apiUrl: Optional[AnyUrl] = Field(\n        None, description=\"The URL describing the dataset's fields\"\n    )\n    apiDocumentationUrl: Optional[AnyUrl] = Field(\n        None, description='A URL to the API console for each API'\n    )\n\n\nclass Apis(BaseModel):\n    __root__: List[Api]\n</code></pre>"},{"location":"pyproject_toml/","title":"pyproject.toml","text":"<p>datamodel-code-generator has a lot of command-line options.</p> <p>The options are supported on <code>pyproject.toml</code>.</p> <p>Example <code>pyproject.toml</code>:</p> <pre><code>[tool.datamodel-codegen]\nfield-constraints = true\nsnake-case-field = true\nstrip-default-none = false\ntarget-python-version = \"3.7\"\n</code></pre>"},{"location":"support-data-types/","title":"Target Source files","text":"<ul> <li>OpenAPI 3 (YAML/JSON, OpenAPI Data Type)</li> <li>JSON Schema (JSON Schema Core /JSON Schema Validation)</li> <li>JSON/YAML Data (it will be converted to JSON Schema)</li> <li>Python dictionary (it will be converted to JSON Schema)</li> </ul>"},{"location":"support-data-types/#implemented-list","title":"Implemented list","text":"<p>This codegen supports major data types to OpenAPI/JSON Schema</p>"},{"location":"support-data-types/#openapi-3-and-jsonschema","title":"OpenAPI 3 and JsonSchema","text":""},{"location":"support-data-types/#datatype","title":"DataType","text":"<ul> <li>string (include patter/minLength/maxLenght)</li> <li>number (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge)</li> <li>integer (include maximum/exclusiveMaximum/minimum/exclusiveMinimum/multipleOf/le/ge)</li> <li>boolean</li> <li>array</li> <li>object</li> </ul>"},{"location":"support-data-types/#string-format","title":"String Format","text":"<ul> <li>date</li> <li>datetime</li> <li>time</li> <li>password</li> <li>email</li> <li>idn-email</li> <li>uuid (uuid1/uuid2/uuid3/uuid4/uuid5)</li> <li>ipv4</li> <li>ipv6</li> <li>hostname</li> <li>decimal</li> </ul>"},{"location":"support-data-types/#other-schema","title":"Other schema","text":"<ul> <li>enum (as enum.Enum or typing.Literal)</li> <li>allOf (as Multiple inheritance)</li> <li>anyOf (as typing.Union)</li> <li>oneOf (as typing.Union)</li> <li>$ref (http extra is required when resolving $ref for remote files.)</li> <li>$id (for JSONSchema)</li> </ul>"},{"location":"using_as_module/","title":"Using as module","text":"<p>datamodel-code-generator is a CLI. But, it has another side as a python module.</p> <p>You can call this code-generator in your python code.</p>"},{"location":"using_as_module/#how-to-use-it-as-module","title":"How to use it as module","text":"<p>You can generate models with <code>datamodel_code_generator.generate</code> into a temporary directory.</p> <p>And, you can read files from the directory.</p>"},{"location":"using_as_module/#installation","title":"Installation","text":"<pre><code>pip install \"datamodel-code-generator[http]\"\n</code></pre>"},{"location":"using_as_module/#example","title":"Example","text":"<pre><code>from pathlib import Path\nfrom tempfile import TemporaryDirectory\nfrom datamodel_code_generator import InputFileType, generate\n\njson_schema: str = \"\"\"{\n    \"type\": \"object\",\n    \"properties\": {\n        \"number\": {\"type\": \"number\"},\n        \"street_name\": {\"type\": \"string\"},\n        \"street_type\": {\"type\": \"string\",\n                        \"enum\": [\"Street\", \"Avenue\", \"Boulevard\"]\n                        }\n    }\n}\"\"\"\n\nwith TemporaryDirectory() as temporary_directory_name:\n    temporary_directory = Path(temporary_directory_name)\n    output = Path(temporary_directory / 'model.py')\n    generate(\n        json_schema,\n        input_file_type=InputFileType.JsonSchema,\n        input_filename=\"example.json\",\n        output=output,\n    )\n    model: str = output.read_text()\nprint(model)\n</code></pre> <p>The result of print(model)</p> <pre><code># generated by datamodel-codegen:\n#   filename:  example.json\n#   timestamp: 2020-12-21T08:01:06+00:00\n\nfrom __future__ import annotations\n\nfrom enum import Enum\nfrom typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass StreetType(Enum):\n    Street = 'Street'\n    Avenue = 'Avenue'\n    Boulevard = 'Boulevard'\n\n\nclass Model(BaseModel):\n    number: Optional[float] = None\n    street_name: Optional[str] = None\n    street_type: Optional[StreetType] = None\n</code></pre>"},{"location":"using_as_module/#why-doesnt-the-function-return-str","title":"Why doesn't the function return str?","text":"<p>If generated code are modular files then, str can't reproduce the structure of modules.</p> <p>Also, <code>TemporaryDirectory</code> and <code>Path</code> provide an easy way to read files.</p> <p>There is an example when a generated model file is only one.</p> <p>Otherwise, You should walk in a directory to find modular files.</p>"},{"location":"using_as_module/#related-projects","title":"Related projects","text":"<p>fastapi-code-generator uses <code>datamodel-code-generator</code> as module to create models from OpenAPI.</p>"}]}